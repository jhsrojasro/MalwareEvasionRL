import gym
import malware_rl
import sys
import pickle
import argparse
sys.path.append("..")
from RL.REINFORCE.reinforce import ReinforceMalwareAgent
from RL.utils.graphs import plot_metrics


default_epochs = 2
default_episodes = 3
default_batch_size = 2

parser = argparse.ArgumentParser()
parser.add_argument("--epochs", type=int, default=default_epochs, help="Number of training epochs")
parser.add_argument("--episodes", type=int, default=default_episodes, help="Number of test episodes")
parser.add_argument("--environment", type=str, default="ember-train-v0", help="Environment to train the agent: ember or malconv")
parser.add_argument("--policy_learning_rate", type=float, default=5e-4, help="Learning rate to train the Policy Network")
parser.add_argument("--value_learning_rate", type=float, default=5e-4, help="Learning rate to train the Value function estimation")
parser.add_argument("--gamma", type=float, default=0.99, help="Discount factor")
parser.add_argument("--lambda_gae", type=float, default=0.95, help="Lambda parameter for Generalized Advantage Estimation")
parser.add_argument("--hidden_units", type=int, default=64, help="Number of hidden units in the neural network")
parser.add_argument("--batch_size", type=int, default=default_batch_size, help="Batch size")
parser.add_argument("--hidden_layers", type=int, default=2, help="Number of hidden layers in the neural network")

args = parser.parse_args()

selected_environment = None

if args.environment == "ember" or args.environment == "ember-train-v0":
    selected_environment =  "ember-train-v0"
elif args.environment == "malconv":
    selected_environment = "malconv-train-v0"
else:
    print("Invalid environment")
    exit()

epochs = args.epochs
test_episodes = args.episodes
policy_learning_rate = args.policy_learning_rate
gamma = args.gamma
lambda_gae = args.lambda_gae
n_hidden_units = args.hidden_units
n_hidden_layers = args.hidden_layers
batch_size = args.batch_size

# epochs = 2
# test_episodes = 3
# batch_size = 2

# environments = [ "malconv-train-v0", "ember-train-v0"]

env = gym.make(selected_environment)

agent = ReinforceMalwareAgent(env, nn_hidden_units=n_hidden_units, nn_hidden_layers=n_hidden_layers)

metrics = agent.train(
    epochs, 
    batch_size=batch_size, 
    save_path=f"models/reinforce_ember_{epochs}_epochs.pt",
    policy_learning_rate=policy_learning_rate,
    value_learning_rate=policy_learning_rate,
    gamma=gamma,
    lambda_gae=lambda_gae
)


fig = plot_metrics(metrics)
fig.savefig(f"plots/reinforce_ember_{epochs}_epochs.png")
n_evasions, evasions_data = agent.test(test_episodes)
print("Metrics: ", metrics)
print("Number of evasions: ", n_evasions)
print("Percentage of evasions: ", n_evasions/test_episodes)
pickle.dump( evasions_data, open( f"data/evaded/ember/reinforce_ember_{epochs}_epochs.p", "wb" ) )
pickle.dump( agent, open( f"models/reinforce_ember_{epochs}_epochs.p", "wb" ))
# print(metrics)
# print(evasions_data)