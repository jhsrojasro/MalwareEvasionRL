import gym
import malware_rl
import sys
import numpy as np
import pickle
import argparse
import multiprocessing as mp
sys.path.append("..")
from RL.DQN.dqn import DQNAgentMalwareEvasion
from RL.utils.graphs import plot_metrics_malware, plot_metrics

parser = argparse.ArgumentParser()
parser.add_argument("--steps", type=int, default=100, help="Number of training steps")
parser.add_argument("--episodes", type=int, default=100, help="Number of test episodes")
parser.add_argument("--environment", type=str, default="ember-train-v0", help="Environment to train the agent: ember or malconv")
parser.add_argument("--start_step", type=int, default=32, help="Number of steps to wait before training")
parser.add_argument("--frozen_target_delay", type=int, default=50, help="Number of steps to update the target network")
parser.add_argument("--learning_rate", type=float, default=5e-4, help="Learning rate")
parser.add_argument("--checkpoint_path", type=str, default="models/dqn_ember_v0.pt", help="Path to save the checkpoint model")
parser.add_argument("--hidden_units", type=int, default=64, help="Number of hidden units in the neural network")
parser.add_argument("--batch_size", type=int, default=32, help="Batch size")
parser.add_argument("--hidden_layers", type=int, default=2, help="Number of hidden layers in the neural network")
parser.add_argument("--memory_capacity", type=int, default=10000, help="Replay memory capacity")

args = parser.parse_args()

selected_environment = None

if args.environment == "ember" or args.environment == "ember-train-v0":
    selected_environment =  "ember-train-v0"
elif args.environment == "malconv":
    selected_environment = "malconv-train-v0"
else:
    print("Invalid environment")
    exit()

training_steps = args.steps
test_episodes = args.episodes
start_step = args.start_step
frozen_target_delay = args.frozen_target_delay
learning_rate = args.learning_rate
n_hidden_units = args.hidden_units
n_hidden_layers = args.hidden_layers
checkpoint_path = args.checkpoint_path
batch_size = args.batch_size
memory_capacity = args.memory_capacity


# environments = [ "malconv-train-v0", "ember-train-v0"]

env = gym.make(selected_environment)

agent = DQNAgentMalwareEvasion(
    env, nn_hidden_units=n_hidden_units,
    nn_hidden_layers=n_hidden_layers, 
    memory_capacity=memory_capacity, 
    minibatch_size=batch_size, 
    epsilon_decay=True, 
    checkpoint_path=checkpoint_path
)

metrics = agent.train(
    training_steps, 
    start_step=start_step, 
    frozen_target_delay=frozen_target_delay, 
    learning_rate=learning_rate, 
    initial_epsilon=1, 
    final_epsilon=0.01, 
    print_delay=1,
    load_model=False
)
# print("Metrics: ", metrics)

fig = plot_metrics(metrics)
fig.savefig(f"plots/dqn_ember_{training_steps}_steps.png")
n_evasions, evasions_data = agent.test(test_episodes)
percentaje = n_evasions/test_episodes
pickle.dump( evasions_data, open( f"data/evaded/ember/dqn_ember_{training_steps}_steps.p", "wb" ) )
pickle.dump( agent, open( f"models/dqn_ember_{training_steps}_steps.p", "wb" ))
# print(metrics)
# print(evasions_data)
print("Number of evasions: ", n_evasions)
print("Percentage of evasions: ", percentaje)
